# -*- coding: utf-8 -*-
"""SS Projectipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f_ZijZx0pZNDhnnB6nwNEMgA3oQcBd9J
"""

import pandas as pd
import numpy as np

# Importing Benign dataset
import json
import io
df = pd.read_json('/content/final_benign_sample.json')
df

dictbenign={}
list1 = df.columns
listkeys=[]
listvalues=[]
print(list1)
for i in list1:
  dictbenign[i] = df[i]['user_Permission']
print(dictbenign)

dictIntent ={}
for i in list1:
  dictIntent[i] = df[i]['intent_activity']
print(dictIntent)

dictService ={}
for i in list1:
  dictService[i] = df[i]['service']
print(dictService)

listkeys = dictbenign.keys()
listvalues = dictbenign.values()


data_benign= pd.DataFrame()
str2 = ', '.join(str(e) for e in listvalues)

str3 = ', '.join(str(e) for e in dictIntent.values())

str4 = ', '.join(str(e) for e in dictService.values())


data_benign['Application'] = listkeys
data_benign['Permission'] = str2
data_benign['Intent activity'] = str3
data_benign['Service'] = str4
data_benign['Permission'] = data_benign['Permission'].str.replace('android.permission.', '')
data_benign['Permission'] = data_benign['Permission'].str.replace('[', '')
data_benign['Permission'] = data_benign['Permission'].str.replace(']', '')
data_benign['Permission'] = data_benign['Permission'].str.replace("'", '')
data_benign['Permission'] = data_benign['Permission'].str.replace("'", '')
data_benign['Intent activity'] = data_benign['Intent activity'].str.replace('[', '')
data_benign['Intent activity'] = data_benign['Intent activity'].str.replace('[', '')
data_benign['Intent activity'] = data_benign['Intent activity'].str.replace("'", '')
data_benign['Intent activity'] = data_benign['Intent activity'].str.replace("'", '')
data_benign['Service'] = data_benign['Intent activity'].str.replace('[', '')
data_benign['Service'] = data_benign['Service'].str.replace('[', '')
data_benign['Service'] = data_benign['Intent activity'].str.replace("'", '')
data_benign['Service'] = data_benign['Service'].str.replace("'", '')

data_benign['Label'] =1
data_benign

#Removing additional prefix in the permission names
data_benign['Permission'] = data_benign['Permission'].str.replace('android.permission.', '')
data_benign

#@title Preprocessing
'''def inds_nans(df):
    inds = df.isna().any(axis=1)
    # print('Found {} rows that had NaN values.'.format(inds.sum()))
    return inds

def inds_dups(df):
    inds = df.duplicated()
    # print('Found {} rows that were duplicates.'.format(inds.sum()))
    return inds

def inds_outliers(df):
    # In this example, we defined outliers as values that are +/- 3 standard deviations 
    # from the mean value. To identify such values, we need to compute the Z score for 
    # every value by subtracting the feature-wise mean and dividing by the feature-wise 
    # standard deviation (also known as standardizing the data).
    df = df[df.columns[:-1]]
    Z = (df-df.mean())/df.std()
    # The below code will give a value of True or False for each row. The row will be
    # True if all of the feature values for that row were within 3 standard deviations of 
    # the mean. The row will be False if at leaset one of the feature values for that row
    # was NOT within 3 standard deviations of the mean.
    inlier_inds = ((Z > -3).sum(axis=1)==9) & ((Z <= 3).sum(axis=1)==9)
    # The outliers are the inverse boolean values of the above
    outlier_inds = ~inlier_inds
    # print('Found {} rows that were outliers.'.format(outlier_inds.sum()))
    return outlier_inds'''

#Data preprocessing - Removing nulls and duplicates
def inds_nans(df):
    inds = df.isna().any(axis=1)
    return inds

def inds_dups(df):
    inds = df.duplicated()
    return inds

data_benign = data_benign.loc[~((inds_nans(data_benign) | inds_dups(data_benign))),:]
data_benign

list_ben_intent =data_benign['Intent activity']
list_ben_Service =data_benign['Service']
data_benign = data_benign.dropna(subset=['Permission']).groupby(['Application'], as_index = False).agg({'Permission': lambda x: ' '.join(x.dropna())})
data_benign['Label'] =1
data_benign['Intent activity'] = list_ben_intent
data_benign['Service'] = list_ben_Service
data_benign

#Importing malignant dataset
import pandas as pd
import numpy as np


import json
import io
df = pd.read_json('/content/final_malware_sample.json')
df

dictbenign={}
list1 = df.columns
listkeys=[]
listvalues=[]
print(list1)
for i in list1:
  dictbenign[i] = df[i]['user_Permission']
print(dictbenign)

dictIntent ={}
for i in list1:
  dictIntent[i] = df[i]['intent_activity']
print(dictIntent)

dictService ={}
for i in list1:
  dictService[i] = df[i]['service']
print(dictService)

listkeys = dictbenign.keys()
listvalues = dictbenign.values()

print('pp',listvalues)
data_malignant = pd.DataFrame()
str2 = ', '.join(str(e) for e in listvalues)
print('ser',str2)

str3 = ', '.join(str(e) for e in dictIntent.values())
print('ser',str2)

str4 = ', '.join(str(e) for e in dictService.values())
print('ser',str2)

data_malignant['Application'] = listkeys
data_malignant['Permission'] = str2
data_malignant['Intent activity'] = str3
data_malignant['Service'] = str4
data_malignant['Permission'] = data_malignant['Permission'].str.replace('android.permission.', '')
data_malignant['Permission'] = data_malignant['Permission'].str.replace('[', '')
data_malignant['Permission'] = data_malignant['Permission'].str.replace(']', '')
data_malignant['Permission'] = data_malignant['Permission'].str.replace("'", '')
data_malignant['Permission'] = data_malignant['Permission'].str.replace("'", '')
data_malignant['Intent activity'] = data_malignant['Intent activity'].str.replace('[', '')
data_malignant['Intent activity'] = data_malignant['Intent activity'].str.replace('[', '')
data_malignant['Intent activity'] = data_malignant['Intent activity'].str.replace("'", '')
data_malignant['Intent activity'] = data_malignant['Intent activity'].str.replace("'", '')
data_malignant['Service'] = data_malignant['Intent activity'].str.replace('[', '')
data_malignant['Service'] = data_malignant['Service'].str.replace('[', '')
data_malignant['Service'] = data_malignant['Intent activity'].str.replace("'", '')
data_malignant['Service'] = data_malignant['Service'].str.replace("'", '')

data_malignant['Label'] =1
data_malignant

#Removing additional prefix from permission names
data_malignant['Permission'] = data_malignant['Permission'].str.replace('android.permission.', '')
data_malignant['Permission'] = data_malignant['Permission'].str.replace('com.android.launcher.permission.','')
data_malignant['Permission'] = data_malignant['Permission'].str.replace('com.android.vending.','')
data_malignant

#Cleaning the malignant dataset
data_malignant = data_malignant.loc[~((inds_nans(data_malignant) | inds_dups(data_malignant))),:]
data_malignant

#Grouping similar applications into one
list_mal_intent = data_malignant['Intent activity']
list_mal_service = data_malignant['Service']
data_malignant = data_malignant.groupby('Application')['Permission'].apply(', '.join).reset_index()
data_malignant['Label'] =0
data_malignant['Intent activity'] = list_mal_intent
data_malignant['Service'] = list_mal_service
data_malignant

#Concatinating benign and malignant datasets
Combineddf = pd.concat([data_benign,data_malignant], ignore_index='True')
Combineddf[Combineddf['Label']==0]

#Encoding the permissions
Encodedval = Combineddf['Permission'].str.get_dummies(',')
Combineddf =Combineddf.join(Encodedval)
# Drop Permission column as it is now encoded
data = Combineddf.drop(['Permission'], axis=1)
data

data1= data.copy()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data1['Application']= le.fit_transform(data['Application'])
data1['Intent activity']= le.fit_transform(data['Intent activity'])
data1['Service']= le.fit_transform(data['Service'])
data1

# Splitting the original data into 80% train and 20% split
from sklearn.model_selection import train_test_split
dataX = data1.drop(['Label'], axis=1)
X_train, X_test, Y_train, Y_test = train_test_split(dataX, data1['Label'], train_size = 0.8, random_state =0)
print(X_train.shape)
print(X_test.shape)

# SVM Classifier
from sklearn import svm
from sklearn.metrics import accuracy_score, precision_score, f1_score, ConfusionMatrixDisplay, recall_score
svmclf = svm.SVC()
svmclf.fit(X_train, Y_train)
y_pred_test = svmclf.predict(X_test)
f1_score_svm = f1_score(Y_test, y_pred_test)
print('F1 Score: %.3f' % fl_score_svm )

#K Nearest Neignbors Classifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, f1_score, ConfusionMatrixDisplay, recall_score
knn = KNeighborsClassifier(n_neighbors = 3)
knn.fit(X_train, Y_train)
y_pred_test = knn.predict(X_test)
f1_score_knn = f1_score(Y_test, y_pred_test)
print('F1 Score: %.3f' % fl_score_knn )

# Logistic Regression classifier
from sklearn.linear_model import LogisticRegression
LogisticRegressionClf = LogisticRegression(random_state=0)
LogisticRegressionClf.fit(X_train, Y_train)
Y_pred_test = LogisticRegressionClf.predict(X_test)
f1_score_logreg = f1_score(Y_test, y_pred_test)
print('F1 Score: %.3f' % fl_score_logreg)

#Decision tree Classifier
from sklearn import tree
from sklearn.metrics import accuracy_score, precision_score, f1_score, ConfusionMatrixDisplay
DecisionTreeclf = tree.DecisionTreeClassifier(criterion ='entropy', max_depth=3)
DecisionTreeclf.fit(X_train, Y_train)
Y_pred_test = DecisionTreeclf.predict(X_test)
f1_score_tree = f1_score(Y_test, y_pred_test)
print('F1 Score: %.3f' % fl_score_tree)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
encoded_workclass = le.fit_transform(data['Application'])
data['Application'] = encoded_workclass
data['Service'] = le.fit_transform(data['Service'])
data['Intent activity'] = le.fit_transform(data['Intent activity'])

from sklearn.model_selection import train_test_split
dataX = data.drop(['Label'], axis=1)
X_a = np.asarray(dataX)
Y_a = np.asarray(data['Label'])
X_train, X_test, Y_train, Y_test = train_test_split(X_a, Y_a, train_size = 0.8, random_state =0)
print(X_train.shape)
print(X_test.shape)

#Performing feature extraction using PCA
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled= scaler.transform(X_test)
#PCA
from sklearn.decomposition import PCA
n_components = 10
pca = PCA(n_components=n_components).fit(X_train_scaled)

X_train_PCA = pca.transform(X_train_scaled)
X_test_PCA = pca.transform(X_test_scaled)

# SVM Classifier
from sklearn import svm
from sklearn.metrics import accuracy_score, precision_score, f1_score, ConfusionMatrixDisplay, recall_score
svmclf = svm.SVC()
svmclf.fit(X_train_PCA, Y_train)
y_pred_test = svmclf.predict(X_test_PCA)
f1_score_svm_pca = f1_score(Y_test, y_pred_test)
print('F1 Score: %.3f' % fl_score_svm_pca)

#Performing feature extraction using ICA
from sklearn.decomposition import FastICA
ica = FastICA(n_components=5)
X_train_ICA = ica.fit_transform(X_train)
X_test_ICA = ica.transform(X_test)

# SVM Classifier
svmclf.fit(X_train_ICA, Y_train)
y_pred_test = svmclf.predict(X_test_ICA)
f1_score_svm_ica = f1_score(Y_test, y_pred_test)
print('F1 Score: %.3f' % fl_score_svm_ica)

#Performing feature extraction using LDA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis(n_components=1)
# run an LDA and use it to transform the features
X_train_lda = lda.fit(X_train, Y_train).transform(X_train)
X_test_lda = lda.fit(X_test, Y_test).transform(X_test)

svmclf.fit(X_train_lda, Y_train)
y_pred_test = svmclf.predict(X_test_lda)
f1_score_lda = f1_score(Y_test, y_pred_test)
print('F1 Score: %.3f' % f1_score_lda)

#Additional Dataset - Malignant
import json
import io
dfMal = pd.read_json('/content/final_SMSmalwareSample (1) 2.json')
dfMal
dict1={}
list1 = dfMal.columns
listkeys=[]
listvalues=[]
print(list1)
for i in list1:
  dict1[i] = dfMal[i]['user_Permission']
print(dict1)

listkeys = dict1.keys()
listvalues = dict1.values()

#Creating a new dataset with application and Permissions as our columns
New_data_malignant= pd.DataFrame()
str2 = ', '.join(str(e) for e in listvalues)
print('ser',str2)
New_data_malignant['Application'] = listkeys
New_data_malignant['Permission'] = str2
New_data_malignant['Permission'] = New_data_malignant['Permission'].str.replace('android.permission.', '')
New_data_malignant['Permission'] = New_data_malignant['Permission'].str.replace('[', '')
New_data_malignant['Permission'] = New_data_malignant['Permission'].str.replace(']', '')
New_data_malignant['Permission'] = New_data_malignant['Permission'].str.replace("'", '')
New_data_malignant['Permission'] = New_data_malignant['Permission'].str.replace("'", '')
New_data_malignant['Label'] =0
New_data_malignant

import json
import io
df = pd.read_json('/content/final_benign_additional.json')
df

dictbenign={}
list1 = df.columns
listkeys=[]
listvalues=[]
print(list1)
for i in list1:
  dictbenign[i] = df[i]['user_Permission']
print(dictbenign)


listkeys = dictbenign.keys()
listvalues = dictbenign.values()

print('pp',listvalues)
new_data_benign= pd.DataFrame()
str2 = ', '.join(str(e) for e in listvalues)
print('ser',str2)
new_data_benign['Application'] = listkeys
new_data_benign['Permission'] = str2
new_data_benign['Permission'] = new_data_benign['Permission'].str.replace('android.permission.', '')
new_data_benign['Permission'] = new_data_benign['Permission'].str.replace('[', '')
new_data_benign['Permission'] = new_data_benign['Permission'].str.replace(']', '')
new_data_benign['Permission'] = new_data_benign['Permission'].str.replace("'", '')
new_data_benign['Permission'] = new_data_benign['Permission'].str.replace("'", '')
new_data_benign['Label'] =1

new_data_benign

New_data_malignant = New_data_malignant.loc[~((inds_nans(New_data_malignant) | inds_dups(New_data_malignant))),:]
New_data_malignant

new_data_benign = new_data_benign.loc[~((inds_nans(new_data_benign) | inds_dups(new_data_benign))),:]
new_data_benign

#Combining benign and malignant datsets
New_Combined_data=pd.concat([new_data_benign,New_data_malignant], ignore_index='True')
New_Combined_data

#Encoding the permissions
Encodedval = New_Combined_data['Permission'].str.get_dummies(',')
New_Combined_data =New_Combined_data.join(Encodedval)
# Drop Permission column as it is now encoded
New_data = New_Combined_data.drop(['Permission'], axis=1)
New_data

from sklearn.preprocessing import LabelEncoder
le1= LabelEncoder()
encoded_workclass1 = le1.fit_transform(New_data['Application'])
New_data['Application'] = encoded_workclass1

from sklearn.model_selection import train_test_split
New_dataX = New_data.drop(['Label'], axis=1)
X = np.asarray(New_dataX)
Y = np.asarray(New_data['Label'])
X_train_New, X_test_New, Y_train_New, Y_test_New = train_test_split(X, Y, train_size = 0.8, random_state =0)
print(X_train_New.shape)
print(X_test_New.shape)

#Performing feature extraction using LDA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis(n_components=1)
# run an LDA and use it to transform the features
X_train_lda = lda.fit(X_train_New, Y_train_New).transform(X_train_New)
X_test_lda = lda.fit(X_test_New, Y_test_New).transform(X_test_New)

# SVM Classifier
svmclf.fit(X_train_lda, Y_train_New)
y_pred_test = svmclf.predict(X_test_lda)
f1_svm_add = f1_score(Y_test_New, y_pred_test)
print('F1 Score: %.3f',fl_svm_add)

#Decision tree Classifier
from sklearn import tree
from sklearn.metrics import accuracy_score, precision_score, f1_score, ConfusionMatrixDisplay

DecisionTreeclf = tree.DecisionTreeClassifier(criterion ='entropy', max_depth=3)
DecisionTreeclf.fit(X_train_lda, Y_train_New)
Y_pred_test = DecisionTreeclf.predict(X_test_lda)
acc_score = accuracy_score(Y_test_New, Y_pred_test)


print('F1 Score: %.3f' % f1_score(Y_test_New, Y_pred_test, pos_label='positive', average='micro'))

# Logistic Regression classifier
from sklearn.linear_model import LogisticRegression
LogisticRegressionClf = LogisticRegression(random_state=0)
LogisticRegressionClf.fit(X_train_lda, Y_train_New)
Y_pred_test = LogisticRegressionClf.predict(X_test_lda)
f1_score_lr_add = f1_score(Y_test_New, Y_pred_test)
print('F1 Score: %.3f' % fl_score_lr_add)